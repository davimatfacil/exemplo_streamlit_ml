import streamlit as st
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
import plotly.express as px

# Gera√ß√£o de dados sint√©ticos de exemplo para treinar o modelo (adaptado para o Brasil)
def generate_house_data(n_samples=100):
    np.random.seed(42)
    # Tamanho em metros quadrados (m¬≤) - m√©dia de 150 m¬≤, desvio padr√£o de 50 m¬≤
    size = np.random.normal(150, 50, n_samples)
    size = np.abs(size) # Garante que n√£o teremos √°reas negativas
    
    # Pre√ßo em Reais (R$) - valor base por m¬≤ mais um ru√≠do aleat√≥rio
    # Assumindo um valor m√©dio de R$ 5.000 por m¬≤ (valor fict√≠cio para o exemplo)
    price = size * 5000 + np.random.normal(0, 50000, n_samples)
    price = np.abs(price) # Garante que n√£o teremos pre√ßos negativos
    
    return pd.DataFrame({'size_m2': size, 'price_reais': price})

# Fun√ß√£o para instanciar e treinar o modelo de regress√£o linear
def train_model():
    df = generate_house_data()
    
    # Divis√£o de dados em treino e teste
    X = df[['size_m2']]
    y = df['price_reais']
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    
    # Treina o modelo
    model = LinearRegression()
    model.fit(X_train, y_train)
    
    return model

# Interface de Usu√°rio do Streamlit para o modelo implantado
def main():
    st.title('üè† Simulador de Pre√ßo de Im√≥veis (Brasil)')
    st.write('Insira o tamanho do im√≥vel em metros quadrados para prever seu pre√ßo de venda.')
    
    # Treina o modelo
    model = train_model()
    
    # Input do usu√°rio
    size = st.number_input('Tamanho do im√≥vel (metros quadrados)', 
                           min_value=30, 
                           max_value=500, 
                           value=100)
    
    if st.button('Prever Pre√ßo'):
        # Realiza a previs√£o
        prediction = model.predict([[size]])
        
        # Mostra o resultado
        st.success(f'Pre√ßo estimado: R$ {prediction[0]:,.2f}')
        
        # Visualiza√ß√£o
        df = generate_house_data()
        fig = px.scatter(df, x='size_m2', y='price_reais', 
                         title='Rela√ß√£o entre Tamanho e Pre√ßo',
                         labels={'size_m2': 'Tamanho (m¬≤)', 'price_reais': 'Pre√ßo (R$)'})
        fig.add_scatter(x=[size], y=[prediction[0]], 
                        mode='markers', 
                        marker=dict(size=15, color='red'),
                        name='Previs√£o')
        st.plotly_chart(fig)

if __name__ == '__main__':
    main()